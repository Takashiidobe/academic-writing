@article{kurosawa2016,
	author = {Kurosawa, Noriyuki},
	year = {2016},
	month = {08},
	pages = {},
	title = {Quicksort with median of medians is considered practical},
	doi = {10.48550/arXiv.1608.04852},
}
@article{candea2003,
	author = {George Candea and Armando Fox},
	title = {{Crash-Only} Software},
	booktitle = {9th Workshop on Hot Topics in Operating Systems (HotOS IX)},
	year = {2003},
	address = {Lihue, HI},
	url = {https://www.usenix.org/conference/hotos-ix/crash-only-software},
	publisher = {USENIX Association},
	month = may
}
@article{cerfkahn1974,
	author = {Vint Cerf and Bob Kahn},
	title = {A Protocol for Packet Network Intercommunication},
	journal = {IEEE Transactions on Communications},
	volume = {22},
	number = {5},
	pages = {637-648},
	year = {1974},
	doi = {10.1109/TCOM.1974.1092259}
}
@article{cerf1974,
	author = {Vint Cerf and Yogen Dalal and Carl Sunshine},
	title = {Specification of Internet Transmission Control Program},
	journal = {RFC 675},
	year = {1974},
	url = {https://datatracker.ietf.org/doc/rfc675/}
}
@article{clark1988,
	author = {David D. Clark},
	title = {The Design Philosophy of the DARPA Internet Protocols},
	journal = {ACM SIGCOMM Computer Communication Review},
	volume = {18},
	number = {4},
	pages = {106-114},
	year = {1988},
	doi = {10.1145/52324.52336}
}
@article{alexandrescu2016,
	title={Fast Deterministic Selection},
	author={Andrei Alexandrescu},
	year={2016},
	eprint={1606.00484},
	archivePrefix={arXiv},
	primaryClass={cs.DS},
	url={https://arxiv.org/abs/1606.00484},
}
@article{mockapetris1988,
	author = {Mockapetris, P. and Dunlap, K. J.},
	title = {Development of the domain name system},
	year = {1988},
	issue_date = {August 1988},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {18},
	number = {4},
	issn = {0146-4833},
	url = {https://doi.org/10.1145/52325.52338},
	doi = {10.1145/52325.52338},
	abstract = {The Domain Name System (DNS) provides name service for the DARPA Internet. It is one of the largest name services in operation today, serves a highly diverse community of hosts, users, and networks, and uses a unique combination of hierarchies, caching, and datagram access.This paper examines the ideas behind the initial design of the DNS in 1983, discusses the evolution of these ideas into the current implementations and usages, notes conspicuous surprises, successes and shortcomings, and attempts to predict its future evolution.},
	journal = {SIGCOMM Comput. Commun. Rev.},
	month = aug,
	pages = {123–133},
	numpages = {11}
}
@online{slotin2024,
	author={Sergey Slotin},
	title={Algorithms for Modern Hardware},
	year = 2024,
	url={https://en.algorithmica.org/hpc/},
	urldate={2024-05-20},
}
@article{ziv1977,
	author = {Ziv, J. and Lempel, A.},
	journal = {IEEE Transactions on Information Theory},
	title = {A universal algorithm for sequential data compression},
	year = {1977},
	volume = {23},
	number = {3},
	pages = {337-343},
	keywords = {},
	doi = {10.1109/TIT.1977.1055714},
}

@article{laurent2018,
	author={Simon, Laurent and Chisnall, David and Anderson, Ross},
	booktitle={2018 IEEE European Symposium on Security and Privacy (EuroS&P)},
	title={What You Get is What You C: Controlling Side Effects in Mainstream C Compilers},
	year={2018},
	volume={},
	number={},
	pages={1-15},
	keywords={Cryptography;Program processors;Standards;Libraries;Timing;Optimization;compilers;LLVM;Clang;compiler optimizations;side channels;cryptography;side effects;C;C abstract machine;constant-time;zeroing;erasing;stack},
	doi={10.1109/EuroSP.2018.00009}
}
@online{bergdoll2024,
	author = {Bergdoll, Lukas, and Peters, Orson},
	title = {ipnsort: an efficient, generic and robust unstable sort implementation.},
	year = 2024,
	url = {https://github.com/Voultapher/sort-research-rs/blob/main/writeup/ipnsort_introduction/text.md},
	urldate = {2024-04-16},
}
@online{kutenin2022,
	author = {Danila Kutenin},
	title = {Changing std::sort at Google’s Scale and Beyond},
	url = {https://danlark.org/2022/04/20/changing-stdsort-at-googles-scale-and-beyond/},
	year = 2022,
	urldate = {2022-04-20}
}
@online{djb2024,
	author = {Daniel J. Bernstein},
	title = {Clang vs. Clang},
	year = 2024,
	url = {https://blog.cr.yp.to/20240803-clang.html},
	urldate = {2024-08-03},
}
@online{meneide2022,
	author = {JeanHeyd Meneide},
	title = {To Save C, We Must Save ABI},
	year = 2022,
	url = {https://thephd.dev/to-save-c-we-must-save-abi-fixing-c-function-abi},
	urldate = {2022-03-13},
}
@online{meneide2021,
	author = {JeanHeyd Meneide},
	title = {Binary Banshees and Digital Demons},
	year = 2021,
	url = {https://thephd.dev/binary-banshees-digital-demons-abi-c-c++-help-me-god-please},
	urldate = {2021-09-20},
}
@article{blum1973,
	title = {Time bounds for selection},
	journal = {Journal of Computer and System Sciences},
	volume = {7},
	number = {4},
	pages = {448-461},
	year = {1973},
	issn = {0022-0000},
	doi = {10.1016/S0022-0000(73)80033-9},
	url = {https://www.sciencedirect.com/science/article/pii/S0022000073800339},
	author = {Manuel Blum and Robert W. Floyd and Vaughan Pratt and Ronald L. Rivest and Robert E. Tarjan},
	abstract = {The number of comparisons required to select the i-th smallest of n numbers is shown to be at most a linear function of n by analysis of a new selection algorithm—PICK. Specifically, no more than 5.4305 n comparisons are ever required. This bound is improved for extreme values of i, and a new lower bound on the requisite number of comparisons is also proved.}
}
@article{chisnall2018,
	author = {Chisnall, David},
	title = {C Is Not a Low-level Language: Your computer is not a fast PDP-11.},
	year = {2018},
	issue_date = {March-April 2018},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {16},
	number = {2},
	issn = {1542-7730},
	url = {https://doi.org/10.1145/3212477.3212479},
	doi = {10.1145/3212477.3212479},
	abstract = {In the wake of the recent Meltdown and Spectre vulnerabilities, it’s worth spending some time looking at root causes. Both of these vulnerabilities involved processors speculatively executing instructions past some kind of access check and allowing the attacker to observe the results via a side channel. The features that led to these vulnerabilities, along with several others, were added to let C programmers continue to believe they were programming in a low-level language, when this hasn’t been the case for decades.},
	journal = {Queue},
	month = apr,
	pages = {18–30},
	numpages = {13}
}
@article{godbolt2019,
	author = {Godbolt, Matt},
	title = {Optimizations in C++ Compilers: A practical journey},
	year = {2019},
	issue_date = {September-October 2019},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {17},
	number = {5},
	issn = {1542-7730},
	url = {https://doi.org/10.1145/3371595.3372264},
	doi = {10.1145/3371595.3372264},
	abstract = {There’s a tradeoff to be made in giving the compiler more information: it can make compilation slower. Technologies such as link time optimization can give you the best of both worlds. Optimizations in compilers continue to improve, and upcoming improvements in indirect calls and virtual function dispatch might soon lead to even faster polymorphism.},
	journal = {Queue},
	month = oct,
	pages = {69–100},
	numpages = {32}
}
@article{chisnall2024,
	author = {Chisnall, David},
	title = {How to Design an ISA},
	year = {2024},
	issue_date = {May 2024},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {67},
	number = {5},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/3640538},
	doi = {10.1145/3640538},
	abstract = {The popularity of RISC-V has led many to try designing instruction sets.},
	journal = {Commun. ACM},
	month = may,
	pages = {60–66},
	numpages = {7}
}
@article{zhou2021,
	title = {An empirical study of optimization bugs in GCC and LLVM},
	journal = {Journal of Systems and Software},
	volume = {174},
	pages = {110884},
	year = {2021},
	issn = {0164-1212},
	doi = {https://doi.org/10.1016/j.jss.2020.110884},
	url = {https://www.sciencedirect.com/science/article/pii/S0164121220302740},
	author = {Zhide Zhou and Zhilei Ren and Guojun Gao and He Jiang},
	keywords = {Empirical study, Compiler reliability, Bug characteristics, Compiler optimization bugs, Compiler testing},
	abstract = {Optimizations are the fundamental component of compilers. Bugs in optimizations have significant impacts, and can cause unintended application behavior and disasters, especially for safety-critical domains. Thus, an in-depth analysis of optimization bugs should be conducted to help developers understand and test the optimizations in compilers. To this end, we conduct an empirical study to investigate the characteristics of optimization bugs in two mainstream compilers, GCC and LLVM. We collect about 57K and 22K bugs of GCC and LLVM, and then exhaustively examine 8,771 and 1,564 optimization bugs of the two compilers, respectively. The results reveal the following five characteristics of optimization bugs: (1) Optimizations are the buggiest component in both compilers except for the C++ component; (2) the value range propagation optimization and the instruction combine optimization are the buggiest optimizations in GCC and LLVM, respectively; the loop optimizations in both GCC and LLVM are more bug-prone than other optimizations; (3) most of the optimization bugs in both GCC and LLVM are misoptimization bugs, accounting for 57.21% and 61.38% respectively; (4) on average, the optimization bugs live over five months, and developers take 11.16 months for GCC and 13.55 months for LLVM to fix an optimization bug; in both GCC and LLVM, many confirmed optimization bugs have lived for a long time; (5) the bug fixes of optimization bugs involve no more than two files and three functions on average in both compilers, and around 99% of them modify no more than 100 lines of code, while 90% less than 50 lines of code. Our study provides a deep understanding of optimization bugs for developers and researchers. This could provide useful guidance for the developers and researchers to better design the optimizations in compilers. In addition, the analysis results suggest that we need more effective techniques and tools to test compiler optimizations. Moreover, our findings are also useful to the research of automatic debugging techniques for compilers, such as automatic compiler bug isolation techniques.}
}
@article{agache2020,
	author = {Alexandru Agache and Marc Brooker and Andreea Florescu and Alexandra Iordache and Anthony Liguori and Rolf Neugebauer and Phil Piwonka and Diana-Maria Popa},
	title = {Firecracker: Lightweight virtualization for serverless applications},
	year = {2020},
	url = {https://www.amazon.science/publications/firecracker-lightweight-virtualization-for-serverless-applications},
	booktitle = {NSDI 2020},
}
@article{thompson1984,
	author = {Thompson, Ken},
	title = {Reflections on trusting trust},
	year = {1984},
	issue_date = {Aug 1984},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {27},
	number = {8},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/358198.358210},
	doi = {10.1145/358198.358210},
	abstract = {To what extent should one trust a statement that a program is free of Trojan horses? Perhaps it is more important to trust the people who wrote the software.},
	journal = {Commun. ACM},
	month = aug,
	pages = {761–763},
	numpages = {3}
}
@article{kolmogorov1968,
	author = {A. N. Kolmogorov},
	title = {Three approaches to the quantitative definition of information * },
	journal = {International Journal of Computer Mathematics},
	volume = {2},
	number = {1-4},
	pages = {157--168},
	year = {1968},
	publisher = {Taylor \& Francis},
	doi = {10.1080/00207166808803030},
	url = {https://doi.org/10.1080/00207166808803030},
}
