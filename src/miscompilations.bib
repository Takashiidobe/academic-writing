@online{chosenplaintext2017,
	author={Chosen Plaintext Consulting},
	title={A beginner's guide to constant-time cryptography},
	year = 2017,
	url={https://www.chosenplaintext.ca/articles/beginners-guide-constant-time-cryptography.html},
	urldate={2024-10-10},
}
@online{djb2022,
	author={Daniel J. Bernstein},
	title={Timing Attacks},
	year=2022,
	url={https://timing.attacks.cr.yp.to/index.html},
	urldate={2024-10-10},
}
@article{xu2023,
	author = {Jianhao Xu and Kangjie Lu and Zhengjie Du and Zhu Ding and Linke Li and Qiushi Wu and Mathias Payer and Bing Mao},
	title = {Silent Bugs Matter: A Study of {Compiler-Introduced} Security Bugs},
	booktitle = {32nd USENIX Security Symposium (USENIX Security 23)},
	year = {2023},
	isbn = {978-1-939133-37-3},
	address = {Anaheim, CA},
	pages = {3655--3672},
	url = {https://www.usenix.org/conference/usenixsecurity23/presentation/xu-jianhao},
	publisher = {USENIX Association},
	month = Aug
}
@article{zhao2012,
	author = {Zhao, Jianzhou and Nagarakatte, Santosh and Martin, Milo M.K. and Zdancewic, Steve},
	title = {Formalizing the LLVM intermediate representation for verified program transformations},
	year = {2012},
	issue_date = {January 2012},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {47},
	number = {1},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/2103621.2103709},
	doi = {10.1145/2103621.2103709},
	abstract = {This paper presents Vellvm (verified LLVM), a framework for reasoning about programs expressed in LLVM's intermediate representation and transformations that operate on it. Vellvm provides a mechanized formal semantics of LLVM's intermediate representation, its type system, and properties of its SSA form. The framework is built using the Coq interactive theorem prover. It includes multiple operational semantics and proves relations among them to facilitate different reasoning styles and proof techniques.To validate Vellvm's design, we extract an interpreter from the Coq formal semantics that can execute programs from LLVM test suite and thus be compared against LLVM reference implementations. To demonstrate Vellvm's practicality, we formalize and verify a previously proposed transformation that hardens C programs against spatial memory safety violations. Vellvm's tools allow us to extract a new, verified implementation of the transformation pass that plugs into the real LLVM infrastructure; its performance is competitive with the non-verified, ad-hoc original.},
	journal = {SIGPLAN Not.},
	month = jan,
	pages = {427â€“440},
	numpages = {14},
	keywords = {Coq, LLVM, memory safety}
}
